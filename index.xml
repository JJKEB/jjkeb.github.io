<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>KUMA Blog</title>
        <link>https://blog.kuma.kr/</link>
        <description>Recent content on KUMA Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Mon, 10 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.kuma.kr/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Create React App 에서 Scoped 사용하기</title>
        <link>https://blog.kuma.kr/p/create-react-app-%EC%97%90%EC%84%9C-scoped-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
        <pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://blog.kuma.kr/p/create-react-app-%EC%97%90%EC%84%9C-scoped-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/8143180/148764494-94bb5d27-abf0-485c-9a49-53e213d0f874.jpg" alt="Featured image of post Create React App 에서 Scoped 사용하기" /&gt;&lt;h3 id=&#34;react-app-환경구성&#34;&gt;React App 환경구성&lt;/h3&gt;
&lt;p&gt;create-react-app 프로젝트 폴더를 생성하고 생성된 폴더로 이동합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npx create-react-app 폴더명

&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; 폴더명
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;추가-패키지-설치&#34;&gt;추가 패키지 설치&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gsoft-inc/craco/blob/master/packages/craco/README.md#installation&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;craco&lt;/a&gt;
 와 &lt;a href=&#34;https://www.npmjs.com/package/craco-plugin-scoped-css&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;craco-plugin-scoped-css&lt;/a&gt;
 패키지 두개를 설치합니다.&lt;/p&gt;
&lt;p&gt;※ craco 는 CRA 환경에 webpack 이나 다른 config 파일을 수정이 힘들기에.. ( &lt;del&gt;npm eject 해야&amp;hellip;&lt;/del&gt; ) eslint, babel, postcss 등의 패키지의 설정을 eject 하지않고 커스텀 할수있도록 해주는 패키지라 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npm i @craco/craco
npm i -D craco-plugin-scoped-css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;packagejson-설정&#34;&gt;package.json 설정&lt;/h3&gt;
&lt;p&gt;루트에 있는 package.json 파일의 scripts 이부분을 craco 실행으로 변경합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;craco start&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;craco build&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;craco test&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;eject&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;react-scripts eject&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cracoconfigjs-생성&#34;&gt;craco.config.js 생성&lt;/h3&gt;
&lt;p&gt;루트에 &lt;strong&gt;craco.config.js&lt;/strong&gt; 파일을 생성하고 아래 내용을 입력한후 저장합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;plugin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;craco-plugin-scoped-css&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cssscss-scoped-생성&#34;&gt;css/scss scoped 생성&lt;/h3&gt;
&lt;p&gt;/src 폴더에 파일을 생성해 줍니다. ( .scss 혹은 .css )&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/경로/파일명.scoped.scss

파일명과 확장자 사이에 scoped 라고 추가 해줘야 합니다.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;cssscss-scoped-연결&#34;&gt;css/scss scoped 연결&lt;/h3&gt;
&lt;p&gt;스타일을 적용하고자 하는 컴포넌트 상단에 import 해줍니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 파일명 폴더와 이름을 확인해서 넣어주세요.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./scss/App.scoped.scss&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;🚩 END&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;이후 &lt;code&gt;npm start&lt;/code&gt; 로 서버를 구동하고 개발자 모드로 소스를 확인하면
html 소스와 css 파일의 내용이 data-v-&amp;hellip;.. 로 바인딩 되어 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://user-images.githubusercontent.com/8143180/148764130-53d10c18-85e5-4794-b7ce-5e78398b7cd6.jpg&#34; &gt;
		&lt;img src=&#34;https://user-images.githubusercontent.com/8143180/148764130-53d10c18-85e5-4794-b7ce-5e78398b7cd6.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;0108_004&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;0108_004&lt;/figcaption&gt;
	
&lt;/figure&gt;
&lt;figure 
	&gt;
	&lt;a href=&#34;https://user-images.githubusercontent.com/8143180/148764132-fb325f07-b7ce-4283-bec9-e4baa75716fa.jpg&#34; &gt;
		&lt;img src=&#34;https://user-images.githubusercontent.com/8143180/148764132-fb325f07-b7ce-4283-bec9-e4baa75716fa.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;0110_003&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;0110_003&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Memo&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스타일 파일의 확장자 앞에 붙이는 &lt;code&gt;scoped&lt;/code&gt; 및 &lt;code&gt;module&lt;/code&gt; 은 단순 import 를 할때엔 컴파일된 css 와 동일하게 작동합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;파일명.scoped.확장자&lt;/code&gt; 이렇게 명명된 파일은 &lt;code&gt;import 변수명 from 경로&lt;/code&gt; 로 값을 받아와도 빈 객체만 리턴됩니다.&lt;/li&gt;
&lt;li&gt;다시 &lt;code&gt;module&lt;/code&gt; 로 사용하거나 &lt;strong&gt;styled-components&lt;/strong&gt; 패키지를 적용 할땐 scoped → module 로 변경하고 import 하면됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;참고 사이트&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/viclafouch/how-to-scope-your-css-scss-in-react-js-271a&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;https://dev.to/viclafouch/how-to-scope-your-css-scss-in-react-js-271a&lt;/a&gt;
 - 원문&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://note.redgoose.me/article/3130/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;https://note.redgoose.me/article/3130/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Git 명령어</title>
        <link>https://blog.kuma.kr/p/git-%EB%AA%85%EB%A0%B9%EC%96%B4/</link>
        <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://blog.kuma.kr/p/git-%EB%AA%85%EB%A0%B9%EC%96%B4/</guid>
        <description>&lt;h2 id=&#34;-git-명령어&#34;&gt;📌 Git 명령어&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git init                           &lt;span class=&#34;c1&#34;&gt;# git 프로젝트 초기화&lt;/span&gt;
git push origin main               &lt;span class=&#34;c1&#34;&gt;# main 브랜치를 원격 저장소 (git server) push&lt;/span&gt;
git clone 깃_저장소_주소             &lt;span class=&#34;c1&#34;&gt;# git 저장소에서 로컬로 복사&lt;/span&gt;

git status                         &lt;span class=&#34;c1&#34;&gt;# 현재 add, commit, push 여부를 보여줌&lt;/span&gt;

git add 파일명                      &lt;span class=&#34;c1&#34;&gt;# 파일을 스테이지(state)에 올림 ( . 은 모든 파일 올림 )&lt;/span&gt;

git commit                         &lt;span class=&#34;c1&#34;&gt;# 파일을 커밋하여 로컬 저장소에 올린다.&lt;/span&gt;
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;add 3.md&amp;#34;&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;# 에디터로 들어가지 않고 &amp;#34;간략하게 커밋 메시지 작성&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# **------------- remote -------------**&lt;/span&gt;
git remote                         &lt;span class=&#34;c1&#34;&gt;# 등록된 리모트 별칭을 보여준다.&lt;/span&gt;
git remote -v                      &lt;span class=&#34;c1&#34;&gt;# 등록된 리모트 별칭 및 주소를 모두 보기 ( -a 원격저장소 브랜치가 확인됨 )&lt;/span&gt;
git remote add origin 깃주소        &lt;span class=&#34;c1&#34;&gt;# 해당 깃주소로 origin 이란 별칭의 원격저장소를 등록한다.&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# **------------- commit 취소 -------------**&lt;/span&gt;
git revert --no-commit HEAD~3..    &lt;span class=&#34;c1&#34;&gt;# 3번의 커밋 이전으로 돌아감&lt;/span&gt;
git reset --hard HEAD~1            &lt;span class=&#34;c1&#34;&gt;# 1번의 이전 커밋으로 돌아감&lt;/span&gt;
git reset --hard HEAD~1            &lt;span class=&#34;c1&#34;&gt;# 2번의 이전 커밋으로 돌아감&lt;/span&gt;
git reset --hard ORIG_HEAD         &lt;span class=&#34;c1&#34;&gt;# 이전으로 돌아갔던걸 취소한다. 1 번만 가능&lt;/span&gt;

git reset HEAD^                    &lt;span class=&#34;c1&#34;&gt;# 가장 최신 커밋 1개 취소(삭제)&lt;/span&gt;
git reset HEAD^^                   &lt;span class=&#34;c1&#34;&gt;# 가장 최신 커밋 2개 취소(삭제)&lt;/span&gt;
                                   &lt;span class=&#34;c1&#34;&gt;# 꺽쇠 갯수에 따라 최신 커밋을 필요한만큼 순서대로 삭제할 수 있음&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# **------------- add 취소 -------------**&lt;/span&gt;
git reset                          &lt;span class=&#34;c1&#34;&gt;# 전체 파일 add 취소)&lt;/span&gt;
git reset HEAD 파일                &lt;span class=&#34;c1&#34;&gt;# 특정 파일 add 취소)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# **------------- branch -------------**&lt;/span&gt;
git branch                        &lt;span class=&#34;c1&#34;&gt;# 등록된 branch(브랜치) 를 보여주고 현재 위치한 브랜치명을 표시해준다.&lt;/span&gt;
git branch 브랜치명                &lt;span class=&#34;c1&#34;&gt;# 지정한 이름의 분기점(branch) 을 만든다.&lt;/span&gt;

git branch -m main                &lt;span class=&#34;c1&#34;&gt;# 기존 동일한 이름의 branch 가 있을경우 경고메시지가 나오고 없을경우 현재 위치한 branch 명을 바꿉니다.&lt;/span&gt;
git branch -M main                &lt;span class=&#34;c1&#34;&gt;# 동일한 이름의 branch 가 있더라도 현재 branch 명을 바꾸고 기존 존재하던 branch 를 삭제 합니다.&lt;/span&gt;

**git** checkout --  **.          &lt;span class=&#34;c1&#34;&gt;#** add, commit 하기 이전에 수정했던 파일들을 원래대로 돌리기&lt;/span&gt;
git checkout -b blue              &lt;span class=&#34;c1&#34;&gt;# blue 라는 이름의 브랜치를 만들면서 동시에 이동한다. (switch 명령으로는 안됨)&lt;/span&gt;
git switch 혹은 checkout 브랜치명   &lt;span class=&#34;c1&#34;&gt;# 지정한 브랜치로 스위칭한다.&lt;/span&gt;

git merge 브랜치명                 &lt;span class=&#34;c1&#34;&gt;# 현재 위치한 브랜치에 지정한 브랜치의 파일을 합친다.&lt;/span&gt;
git branch -D 브랜치명             &lt;span class=&#34;c1&#34;&gt;# 사용이 끝난 **브랜치 삭제**하기&lt;/span&gt;

git pull origin master            &lt;span class=&#34;c1&#34;&gt;# origin 이란 별칭의 원격 remote 주소의 파일을 로컬 master 브랜치로 가져온다.&lt;/span&gt;
git fetch upstream develop        &lt;span class=&#34;c1&#34;&gt;# upstream 이란 별칭의 원격 remote 주소의 파일을 로컬 develop 브랜치로 가져온다.&lt;/span&gt;

git log --oneline                 &lt;span class=&#34;c1&#34;&gt;# 커밋 했던 내역 간략하게 확인&lt;/span&gt;

**# git bash 명령어**
touch server.py                   &lt;span class=&#34;c1&#34;&gt;# 파일 생성&lt;/span&gt;
ls                                &lt;span class=&#34;c1&#34;&gt;# 파일을 본다 ( 뒤에 -a 를 붙이면 숨김파일도 보여준다 )&lt;/span&gt;
vi 파일명                          &lt;span class=&#34;c1&#34;&gt;# vim 에디터로 파일을 연다&lt;/span&gt;
cat 파일명                         &lt;span class=&#34;c1&#34;&gt;# 파일 내용 미리보기&lt;/span&gt;
rm 파일명                          &lt;span class=&#34;c1&#34;&gt;# 파일 삭제&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# **VS CODE 실행 팁 bath** &lt;/span&gt;
code .                             &lt;span class=&#34;c1&#34;&gt;# vscode로 해당 폴더 프로젝트 열림 - vscode 터미널이라면 해당 창에 열림&lt;/span&gt;
code . -r                          &lt;span class=&#34;c1&#34;&gt;# vscode로 해당 폴더 프로젝트 새창 열림&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
