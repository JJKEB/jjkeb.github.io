[{"content":"React에서 컴포넌트에 스타일을 적용하는 방법을 공부하던중에 VUE 에서는 단순히 style 태그에 scoped 만 적어주면 되는걸 React 에서는 module 이라고 확장자도 바꿔줘야하고 각 클래스 마다 전부 조절해줘야 한다는점에 의구심이 들어 VUE 처럼 적용할수는 없을까? .. 해서 찾아보니 방법이 있어서 해봤습니다.\n 환경구성 node.js 설치가 완료되어 npm 명령어 사용이 가능할때 create-react-app 프로젝트 폴더를 생성하고 생성된 폴더로 이동합니다.\n# 글로벌로 설치할때 npm i -g create-react-app // 글로벌로 설치 create-react-app . // 설치할 폴더로 이동후 터미널에서 명령어 실행 # 특정 폴더에만 설치할때 npx create-react-app 설치폴더명 cd 폴더명 추가 패키지 설치 craco\r와 craco-plugin-scoped-css\r패키지 두개를 설치합니다.\n※ craco 는 CRA 환경에 webpack 이나 다른 config 파일을 수정이 힘들기에.. ( npm eject 해야\u0026hellip; ) eslint, babel, postcss 등의 패키지의 설정을 eject 하지않고 커스텀 할수있도록 해주는 패키지라 합니다.\nnpm i @craco/craco npm i -D craco-plugin-scoped-css package.json 설정 루트에 있는 package.json 파일의 scripts 이부분을 craco 실행으로 변경합니다.\n\u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;craco start\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;craco build\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;craco test\u0026#34;, \u0026#34;eject\u0026#34;: \u0026#34;react-scripts eject\u0026#34; } craco.config.js 생성 루트에 craco.config.js 파일을 생성하고 아래 내용을 입력한후 저장합니다.\nmodule.exports = { plugins: [ { plugin: require(\u0026#34;craco-plugin-scoped-css\u0026#34;), }, ], }; css/scss scoped 생성 /src 폴더에 파일을 생성해 줍니다. ( .scss 혹은 .css )\n/경로/파일명.scoped.scss\r파일명과 확장자 사이에 scoped 라고 추가 해줘야 합니다.\rcss/scss scoped 연결 스타일을 적용하고자 하는 컴포넌트 상단에 import 해줍니다.\n// 파일명 폴더와 이름을 확인해서 넣어주세요.  import \u0026#34;./scss/App.scoped.scss\u0026#34;;  🚩 END\u0026hellip;\n이후 npm start 로 서버를 구동하고 개발자 모드로 소스를 확인하면 html 소스와 css 파일의 내용이 data-v-\u0026hellip;.. 로 바인딩 되어 있습니다.\n\r0108_004\r \r0110_003\r\n Memo\n 스타일 파일의 확장자 앞에 붙이는 scoped 및 module 은 단순 import 를 할때엔 컴파일된 css 와 동일하게 작동합니다. 파일명.scoped.확장자 이렇게 명명된 파일은 import 변수명 from 경로 로 값을 받아와도 빈 객체만 리턴됩니다. 다시 module 로 사용하거나 styled-components 패키지를 적용 할땐 scoped → module 로 변경하고 import 하면됩니다.   참고 사이트\n https://dev.to/viclafouch/how-to-scope-your-css-scss-in-react-js-271a\r- 원문 https://min9nim.github.io/2020/04/react-scoped-css/\r ","date":"2022-01-10T00:00:00Z","image":"https://user-images.githubusercontent.com/8143180/148764494-94bb5d27-abf0-485c-9a49-53e213d0f874.jpg","permalink":"https://blog.kuma.kr/p/create-react-app-%EC%97%90%EC%84%9C-scoped-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/","title":"Create React App 에서 Scoped 사용하기"},{"content":"📌 Git 명령어 git init # git 프로젝트 초기화 git push origin main # main 브랜치를 원격 저장소 (git server) push git clone 깃_저장소_주소 # git 저장소에서 로컬로 복사 git status # 현재 add, commit, push 여부를 보여줌 git add 파일명 # 파일을 스테이지(state)에 올림 ( . 은 모든 파일 올림 ) git commit # 파일을 커밋하여 로컬 저장소에 올린다. git commit -m \u0026#34;add 3.md\u0026#34; # 에디터로 들어가지 않고 \u0026#34;간략하게 커밋 메시지 작성\u0026#34; # **------------- remote -------------** git remote # 등록된 리모트 별칭을 보여준다. git remote -v # 등록된 리모트 별칭 및 주소를 모두 보기 ( -a 원격저장소 브랜치가 확인됨 ) git remote add origin 깃주소 # 해당 깃주소로 origin 이란 별칭의 원격저장소를 등록한다. # **------------- commit 취소 -------------** git revert --no-commit HEAD~3.. # 3번의 커밋 이전으로 돌아감 git reset --hard HEAD~1 # 1번의 이전 커밋으로 돌아감 git reset --hard HEAD~1 # 2번의 이전 커밋으로 돌아감 git reset --hard ORIG_HEAD # 이전으로 돌아갔던걸 취소한다. 1 번만 가능 git reset HEAD^ # 가장 최신 커밋 1개 취소(삭제) git reset HEAD^^ # 가장 최신 커밋 2개 취소(삭제) # 꺽쇠 갯수에 따라 최신 커밋을 필요한만큼 순서대로 삭제할 수 있음 # **------------- add 취소 -------------** git reset # 전체 파일 add 취소) git reset HEAD 파일 # 특정 파일 add 취소) # **------------- branch -------------** git branch # 등록된 branch(브랜치) 를 보여주고 현재 위치한 브랜치명을 표시해준다. git branch 브랜치명 # 지정한 이름의 분기점(branch) 을 만든다. git branch -m main # 기존 동일한 이름의 branch 가 있을경우 경고메시지가 나오고 없을경우 현재 위치한 branch 명을 바꿉니다. git branch -M main # 동일한 이름의 branch 가 있더라도 현재 branch 명을 바꾸고 기존 존재하던 branch 를 삭제 합니다. **git** checkout -- **. #** add, commit 하기 이전에 수정했던 파일들을 원래대로 돌리기 git checkout -b blue # blue 라는 이름의 브랜치를 만들면서 동시에 이동한다. (switch 명령으로는 안됨) git switch 혹은 checkout 브랜치명 # 지정한 브랜치로 스위칭한다. git merge 브랜치명 # 현재 위치한 브랜치에 지정한 브랜치의 파일을 합친다. git branch -D 브랜치명 # 사용이 끝난 **브랜치 삭제**하기 git pull origin master # origin 이란 별칭의 원격 remote 주소의 파일을 로컬 master 브랜치로 가져온다. git fetch upstream develop # upstream 이란 별칭의 원격 remote 주소의 파일을 로컬 develop 브랜치로 가져온다. git log --oneline # 커밋 했던 내역 간략하게 확인 **# git bash 명령어** touch server.py # 파일 생성 ls # 파일을 본다 ( 뒤에 -a 를 붙이면 숨김파일도 보여준다 ) vi 파일명 # vim 에디터로 파일을 연다 cat 파일명 # 파일 내용 미리보기 rm 파일명 # 파일 삭제 # **VS CODE 실행 팁 bath**  code . # vscode로 해당 폴더 프로젝트 열림 - vscode 터미널이라면 해당 창에 열림 code . -r # vscode로 해당 폴더 프로젝트 새창 열림 ","date":"2022-01-08T00:00:00Z","permalink":"https://blog.kuma.kr/p/git-%EB%AA%85%EB%A0%B9%EC%96%B4/","title":"Git 명령어"}]